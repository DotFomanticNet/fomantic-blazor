@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
<div class="article">
    <div class="ui masthead vertical tab segment">
        <div class="ui container">
            <div class="introduction">

                <h1 class="ui header">
                    @Title

                    <div class="sub header">
                        @Description
                    </div>
                </h1>

                <div class="ui hidden divider"></div>

                <div class="ui right floated main menu">

                    <a class="bug popup icon item" data-content="Submit Bug Report" href="https://github.com/ahmed007boss/fomantic-blazor/issues/new?body=%23%20Bug%20Report%0A%0A%3C!--%0ATitle%20Format%0A%20%20%5BScope%5D%20Summary%20of%20what%20is%20broken%0A--%3E%0A%0A%23%23%20Steps%20to%20reproduce%0A1.%0A2.%0A3.%0A%0A%23%23%20Expected%20result%0A%0A%23%23%20Actual%20result%0A%0A%23%23%20Testcase%0A%3C!--%20Fork%20https%3A%2F%2Fjsfiddle.net%2F31d6y7mn%20--%3E%0A%0A%23%23%20Screenshot%20(when%20possible)%0A!%5B%5D()%0A%0A%23%23%20Version%0Ax.x.x">
                        <i class="bug icon"></i>
                    </a>

                    <a class="github popup icon item" data-content="View project on GitHub" href="https://github.com/ahmed007boss/fomantic-blazor/">
                        <i class="alternate github icon"></i>
                    </a>
                </div>

            </div>





            @if (Type != null)
            {



                <div class="ui two item stackable tabs menu">

                    <a @onclick='d=>SwichTab("Features Showcases")' class='@(CurrentTab=="Features Showcases"?"active":"") item'>Features Showcases</a>

                    <a @onclick='d=>SwichTab(CurrentTab="Api Documentation ")' class='@(CurrentTab=="Api Documentation"?"active":"") item'>API Documentation</a>


                </div>
            }
        </div>
    </div>
    <div class="main ui container@(CurrentTab == "Features Showcases"?" ":" transition hidden")">
        <div class="ui dividing right rail">
            <div class="ui sticky">
                <h3 class="ui header">@Title</h3>
                <div class="ui vertical following fluid accordion text menu">
                    @foreach (var item in Children)
                    {

                        <div class="item">
                            <a class="title"><i class="dropdown icon"></i> <b>@(item.Title)</b></a>
                            <div class="content menu">
                                @if (item.Children != null)
                                {
                                    @foreach (var inneritem in item?.Children)
                                    {

                                        <a class="item" data-for="@inneritem.Id" @onclick='async d=> { await inneritem.ElementRef.JumpToTopOf(JsRuntime);await JsRuntime.InvokeVoidAsync("window.demo.applyHash",inneritem.Id); }'>@(inneritem.Title)</a>

                                    }
                                }

                            </div>
                        </div>




                    }
                </div>
            </div>
        </div>

        <CascadingValue Value=this IsFixed="true">
            @ChildContent
        </CascadingValue>

    </div>

    @code{
        ElementReference BaseInterfacesandclasses;
        ElementReference ParamtersAndProperties;
        ElementReference Methods;
        ElementReference Events;
    }

    <div class="main ui container@(CurrentTab == "Api Documentation "?" ":" transition hidden")">

        @if (Type != null)
        {
            <div class="ui dividing right rail">
                <div class="ui sticky">
                    <h3 class="ui header">@Title</h3>
                    <div class="ui vertical following fluid accordion text menu">
                        <div class="content menu active">
                            <a data-for="BaseInterfacesandclasses" class="item" @onclick='async d=> { await BaseInterfacesandclasses.JumpToTopOf(JsRuntime); }'> <b>Base Interfaces and classes</b></a>
                            <a data-for="ParamtersAndProperties" class="item" @onclick='async d=> { await ParamtersAndProperties.JumpToTopOf(JsRuntime); }'> <b>Paramters and Properties</b></a>
                            <a data-for="Methods" class="item" @onclick='async d=> { await Methods.JumpToTopOf(JsRuntime); }'> <b>Methods</b></a>
                            <a data-for="Events" class="item" @onclick='async d=> { await Events.JumpToTopOf(JsRuntime); }'> <b>Events</b></a>
                        </div>
                    </div>
                </div>
            </div>
            @if (secoundTabInit)
            {
                <div id="BaseInterfacesandclasses" @ref="BaseInterfacesandclasses" class="ui instructive  attached segment">
                    <Header Type="HeaderType.H4">
                        Base Interfaces and classes
                    </Header>
                    <BaseInterfacesDocumentationTable Type="Type">

                    </BaseInterfacesDocumentationTable>
                </div>
                <div id="ParamtersAndProperties" @ref="ParamtersAndProperties" class="ui instructive  attached segment">
                    <Header Type="HeaderType.H4">
                        Paramters and Properties
                    </Header>

                    <PropertiesDocumentationTable Type="Type">

                    </PropertiesDocumentationTable>

                </div>
                <div id="Methods" @ref="Methods" class="ui instructive  attached segment">
                    <Header Type="HeaderType.H4">
                        Methods
                    </Header>

                    <MethodsDocumentationTable Type="Type">

                    </MethodsDocumentationTable>

                </div>
                <div id="Events" @ref="Events" class="ui instructive  attached segment">
                    <Header Type="HeaderType.H4">
                        Events
                    </Header>

                    <EventsDocumentationTable Type="Type">

                    </EventsDocumentationTable>

                </div>

            }
        }
    </div>


    <Footer />

</div>

@code{
    bool secoundTabInit;
    public string CurrentTab { get; set; } = "Features Showcases";
    public List<DocumentationArticleGroup> Children { get; set; } = new List<DocumentationArticleGroup>();

    [Parameter]
    public string Title { get; set; }
    [Parameter]
    public Type Type { get; set; }

    //[Parameter]
    //public RenderFragment DescriptionTemplate { get; set; }

    [Parameter]
    public string Description { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public string PageUri { get; set; }

    public void Refresh()
    {
        this.StateHasChanged();
    }
    async void SwichTab(string tabName)
    {

        CurrentTab = tabName;
        await JsRuntime.InvokeVoidAsync("window.semantic.ready");
        secoundTabInit = true;


    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        Console.WriteLine(Children.Count);
        if (firstRender)
        {
            var samples = Children.SelectMany(d => d.Children);
            if (NavigationManager.Uri.Contains("#"))
            {
                var id = NavigationManager.Uri.Substring(NavigationManager.Uri.LastIndexOf("#"), NavigationManager.Uri.Length - NavigationManager.Uri.LastIndexOf("#"));
                id = id.Replace("#", "");
                var currentSample = samples.FirstOrDefault(d => !string.IsNullOrEmpty(id) && id == d.Id);
                if (currentSample != null)
                {
                    await currentSample.ElementRef.JumpToTopOf(JsRuntime, 0, 0);
                }

            }
            await JsRuntime.InvokeVoidAsync("window.semantic.ready");

            foreach (var item in samples)
            {
                item.LoadSample();
            }
            this.StateHasChanged();
        }

    }
}
