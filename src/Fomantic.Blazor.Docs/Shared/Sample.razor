@inject IJSRuntime JsRuntime

@using System.Reflection
@if (initilized)
{
    <div @ref="sideMenu2" class="ui sidebar editor-tree  vertical menu">
        @if (currentComponent == null)
        {
            <h4 class="ui header">
                <i class="settings icon"></i>
                <div class="content">
                    @Title
                    <div class="sub header">Select Component Below</div>
                </div>
            </h4>
            <div class="ui middle aligned selection children list">
                @foreach (var item in ComponentsTypes)
                {
                    <div class="item" @onclick="d=>Select(item)">
                        <i class="angle right large icon"></i>
                        <div class="content">
                            <div class="header">@item.ThisComponent?.GetType().Name</div>
                            @if (item is ISampleComponentWithChildren)
                            {
                                <div class="description">Contains @((item as ISampleComponentWithChildren).GetChildrenCount()) children</div>
                            }
                            @if (item is ISampleComponentWithHtmlContent)
                            {
                                <div class="description">Contains HTML Content</div>
                            }
                        </div>
                    </div>
                }
                <div class="item add-component-item" @onclick="d=>addComponentModalRef?.Open(this.ComponentsTypes,currentComponent,()=>this.StateHasChanged())">
                    <div class="left floated content">
                        <i class=" add large icon"></i>
                    </div>
                    <div class="content">
                        <div class="header">Add Component</div>
                        <div class="description">Add Exta component </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="ui middle aligned selection root list">
                <div class="item" @onclick="d=>Select(currentComponent.ParentComponent)">
                    <div class="left floated content">
                        <i class="angle left large icon"></i>
                    </div>

                    <div class="content">
                        <div class="header">@currentComponent.ThisComponent?.GetType().Name</div>
                        @if (currentComponent is ISampleComponentWithChildren)
                        {
                            <div class="description">Contains @((currentComponent as ISampleComponentWithChildren).GetChildrenCount()) children</div>
                        }
                        @if (currentComponent is ISampleComponentWithHtmlContent)
                        {
                            <div class="description">Contains HTML Content</div>
                        }
                    </div>
                </div>

            </div>
            @if (currentComponent is ISampleComponentWithChildren)
            {
                <div class="ui middle aligned selection children list">

                    @foreach (var item in (currentComponent as ISampleComponentWithChildren).GetInternalComponents())
                    {
                        <div class="item" @onclick="d=>Select(item)">
                            <i class="angle right large icon"></i>
                            <div class="content">
                                <div class="header">@item.ThisComponent?.GetType().Name</div>
                                @if (item is ISampleComponentWithChildren)
                                {
                                    <div class="description">Contains @((item as ISampleComponentWithChildren).GetChildrenCount()) children</div>
                                }
                                @if (item is ISampleComponentWithHtmlContent)
                                {
                                    <div class="description">Contains HTML Content</div>
                                }
                            </div>
                        </div>
                    }

                    <div class="item add-component-item" @onclick="d=>addComponentModalRef?.Open((currentComponent as ISampleComponentWithChildren).GetInternalComponents(),currentComponent,()=>this.StateHasChanged())">
                        <div class="left floated content">
                            <i class=" add large icon"></i>
                        </div>
                        <div class="content">
                            <div class="header">Add Component</div>
                            <div class="description">Add Exta component </div>
                        </div>
                    </div>
                </div>
            }
            @if (currentComponent is ISampleComponentWithHtmlContent)
            {
                <div class="code-editor-container">
                    <CodeEditor @bind-Code="((currentComponent as ISampleComponentWithHtmlContent).Content)">

                    </CodeEditor>
                </div>
            }
        }
        @if (isEditing)
        {
            <MethodParamterForm @ref="MethodInvocationForm"></MethodParamterForm>
            <AddComponentModal @ref="addComponentModalRef"></AddComponentModal>
        }
    </div>
    <div @ref="sideMenu1" class="ui right vertical sidebar">
        @if (currentComponent != null)
        {
            <form class="ui form">
                <table class="ui compact selectable  celled  table">
                    <tbody>
                        <tr>
                            <td class="catagory" colspan="2">
                                <select @bind="SheetViewType">

                                    <option value="Properties">Properties</option>
                                    <option value="Methods">Methods</option>
                                    <option value="Events">Events</option>
                                </select>
                            </td>
                        </tr>
                        @if (SheetViewType == "Properties")
                        {

                            @foreach (var item in Prop)
                            {
                                @if (item.Item3.PropertyType.Name == "string")
                                {
                                    <tr>
                                        <td class="label"><label for="@item.Item3.Name">@item.Item3.Name</label> </td>
                                        <td class="editor">

                                            <div class="field">
                                                <input id="@item.Item3.Name" value="@item.Item3.GetValue(item.Item2)" type="text" />
                                            </div>
                                        </td>
                                    </tr>
                                }
                                @if (item.Item3.PropertyType.Name == "Boolean")
                                {
                                    <tr>
                                        <td class="label"><label for="@item.Item3.Name">@item.Item3.Name</label> </td>
                                        <td>
                                            <div class="field">
                                                <div class="ui slider checkbox">
                                                    <input @onchange="d => OnBooleanChange(d, item.Item3)" checked="@item?.Item3?.GetValue(item.Item2)" type="checkbox" class="hidden">
                                                </div>
                                            </div>
                                        </td>
                                    </tr>
                                }
                                @if (item.Item3.PropertyType.IsEnum)
                                {
                                    <tr>
                                        <td class="label"><label for="@item.Item3.Name">@item.Item3.Name</label> </td>
                                        <td class="editor">
                                            <div class="field">
                                                <select @onchange="d => OnEnumChange(d, item.Item3)">
                                                    @foreach (var enumValue in item.Item3.PropertyType.GetEnumValues())
                                                    {
                                                        <option selected="@(item.Item3.GetValue(item.Item2).ToString()==enumValue.ToString())" value="@enumValue">@enumValue</option>
                                                    }
                                                </select>
                                            </div>
                                        </td>
                                    </tr>
                                }
                                @if (item.Item3.PropertyType.IsGenericType && item.Item3.PropertyType.GetGenericTypeDefinition() == typeof(Nullable<>))
                                {
                                    @if (item.Item3.PropertyType.GetGenericArguments()[0].IsEnum)
                                    {
                                        <tr>
                                            <td class="label"><label for="@item.Item3.Name">@item.Item3.Name</label> </td>
                                            <td class="editor">
                                                <div class="field">
                                                    <select @onchange="d => OnEnumChange(d, item.Item3)">
                                                        <option selected="@(item.Item3.GetValue(item.Item2)==null)" value="None">None</option>
                                                        @foreach (var enumValue in item.Item3.PropertyType.GetGenericArguments()[0].GetEnumValues())
                                                        {
                                                            <option selected="@(item.Item3.GetValue(item.Item2)?.ToString()==enumValue?.ToString())" value="@enumValue">@enumValue</option>
                                                        }
                                                    </select>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                }
                            }
                        }
                        @if (SheetViewType == "Methods")
                        {
                            @foreach (var methodGroup in Methods.GroupBy(d => d.Item1))
                            {
                                if (!string.IsNullOrEmpty(methodGroup.Key))
                                {
                                    <tr>
                                        <td colspan="2" class="catagory">
                                            @methodGroup.Key
                                        </td>

                                    </tr>
                                }

                                @foreach (var method in methodGroup)
                                {
                                    <tr>
                                        <td class="catagory">
                                            @method.Item3.Name
                                        </td>
                                        <td class="catagory">
                                            <button type="button" @onclick="d=>InvokeMethod(d,method.Item2,method.Item3)" class="ui tiny button">
                                                Invoke
                                            </button>
                                        </td>
                                    </tr>
                                }

                            }
                        }
                    </tbody>
                </table>
            </form>
        }
    </div>

}

<div @ref="ElementRef" class="example" id="@Id">
    <h4 class="ui header active">
        <a @onclick='async d=> { await ElementRef.JumpToTopOf(JsRuntime); await JsRuntime.InvokeVoidAsync("window.demo.applyHash",Id); }'>
            <i class="fitted small linkify icon"></i> @Title
        </a>
    </h4>
    <p>
        @DescriptionTemplate
    </p>
    @if (initilized)
    {
        <Segments>
            @if (isLoading)
            {
                <div class="ui active inverted dimmer">
                    <div class="ui text loader">Loading</div>
                </div>
            }

            <div class="html ui top attached  segment">

                <div class="ui top attached label">
                    Example
                    @if (SampleBody == null)
                    {
                        <span @onclick="d=>ToggleEditing()" class="right floated" data-tooltip="Open sample playground" data-inverted="" data-variation="tiny">
                            <i class=" @(isEditing?"blue":"")  pen link icon"></i>
                        </span>
                    }
                    <span @onclick="async d=> {
                                    IsCodeHidden = !IsCodeHidden;

                                    if (!IsCodeHidden)
                                    {
                                        if (ApiDocumentation != null)
                                        {
                                            ApiReferenceHidden = false;
                                        }

                                    }
                                    await RefreshCode();
                                }" class="right floated" data-tooltip="Show/Hide sample code" data-inverted="" data-variation="tiny">
                        <i class="right floated link  @(IsCodeHidden?"":"blue")   icon code">                </i>
                    </span>
                    <span @onclick="d=>CopyCode()" class="right floated" data-tooltip="Copy sample code" data-inverted="" data-variation="tiny">
                        <i class="right floated copy link icon"></i>
                    </span>
                    @if (ApiDocumentation != null)
                    {
                        <span @onclick="async d => { ApiReferenceHidden = !ApiReferenceHidden;
                                        if (ApiReferenceHidden)
                                        {
                                            IsCodeHidden = true;
                                        }
                                        await RefreshCode();
                                    }" class="right floated" data-tooltip="Show/Hide API reference" data-inverted="" data-variation="tiny">
                            <i class="right floated link @(ApiReferenceHidden?"blue":"") icon file code">                </i>
                        </span>
                    }
                </div>

            </div>
            <div class="ui equal width grid">

                <div class="column">
                    @if (IsPlayed)
                    {
                        @if (SampleBody != null)
                        {
                            @SampleBody
                        }
                        else
                        {
                            <div class="sample">

                                @foreach (var item in ComponentsTypes)
                                {
                                   

                                        @(item.GetRenderFragment(currentComponent))

                                    
                                }
                            </div>
                        }

                    }
                    else
                    {
                        <Segment ContentSpace="ContentSpace.VeryPadded" ContentAlignment="ContentAlignment.Center">
                            <button @onclick="d=>IsPlayed=true" class="ui button">Play</button>
                        </Segment>
                    }
                </div>
                @if (this.ComponentsTypes.Any(d => d is ISampleComponentEvents))
                {
                    <div class="column">
                        <table class="ui celled table">
                            <thead>
                                <tr>
                                    <th>Event</th>
                                    <th>EventArg Type</th>
                                    <th>Number of calls</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in ComponentsTypes.OfType<ISampleComponentEvents>())
                                {
                                    if (item is ISampleComponentEvents s)
                                    {
                                        foreach (var cevent in s.Events)
                                        {

                                            <tr @ref="cevent.ElementRef">
                                                <td  data-label="Name"> @cevent.Name</td>
                                                <td data-label="Arg Type"> <TypeViewer Type="cevent.Type"></TypeViewer></td>
                                                <td data-label="Age">@cevent.TimeCalled</td>
                                            </tr>

                                        }
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                }

            </div>
            @if (ApiReferenceHidden && ApiDocumentation != null)
            {
                @ApiDocumentation
            }
            <div class="ui instructive bottom attached segment @GetCodeHiddenClass()">
                <div @ref="codeArea" style="min-height:180px"></div>
            </div>
        </Segments>
    }

</div>
