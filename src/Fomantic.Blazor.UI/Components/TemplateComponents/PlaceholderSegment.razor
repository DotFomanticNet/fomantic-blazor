@namespace Fomantic
@using Fomantic.Blazor.UI
@inherits SegmentBase
@code{
    public PlaceholderSegment()
    {
        IsPlaceholder = true;
    }

    public HeaderWithIcon Header { get; private set; }

    [Parameter]
    public IconList Icon { get; set; }
    [Parameter]
    public Color? IconColor { get; set; }
    [Parameter]
    public Color? HeaderColor { get; set; }
    [Parameter]
    public bool IsIconCircular { get; set; }
    [Parameter]
    public RenderFragment HeaderWithIconElementTemplate { get; set; }

    [Parameter]
    public RenderFragment ButtonTemplate { get; set; }
}
@RenderBeforeRootElementFragments()
<div @ref="RootElement" @attributes='GetRootElementAttributes()' class="@GetCssClass()">

    @if (HeaderWithIconElementTemplate == null)
    {
    <HeaderWithIcon @ref="Header" @attributes='InputAttributes.GetElementAttributes("Header")' Icon="Icon" IsIconCircular="IsIconCircular" Color="HeaderColor??Color" IconColor="IconColor??Color" IsDisabled="IsDisabled" IsInverted="IsInverted">
        @RenderContent()
    </HeaderWithIcon>
    }
    else
    {
        @HeaderWithIconElementTemplate
    }

    @if (ButtonTemplate != null)
    {
        <div class="inline">
            @ButtonTemplate
        </div>
    }

</div>
@RenderAfterRootElementFragments()