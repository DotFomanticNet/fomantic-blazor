@namespace Fomantic
@using Fomantic.Blazor.UI
@inherits HeaderBase

@code{

    public Icon IconElement { get; private set; }

    [Parameter]
    public IconList Icon { get; set; }
    [Parameter]
    public Color? IconColor { get; set; }
    [Parameter]
    public bool IsIconCircular { get; set; }
    [Parameter]
    public RenderFragment IconTemplate { get; set; }
}
@RenderBeforeRootElementFragments()
@if (this.Type == HeaderType.Content)
{
    <div @ref="RootElement" @attributes='GetRootElementAttributes()' class="@GetCssClass().Replace("ui ","ui icon ").Replace("ui ","ui icon ")">
        @GetInner()
    </div>
}
@if (this.Type == HeaderType.H1)
{
    <h1 @ref="RootElement" @attributes='GetRootElementAttributes()' class="@GetCssClass().Replace("ui ","ui icon ")">
        @GetInner()
    </h1>
}
@if (this.Type == HeaderType.H2)
{
    <h2 @ref="RootElement" @attributes='GetRootElementAttributes()' class="@GetCssClass().Replace("ui ","ui icon ")">
        @GetInner()
    </h2>
}
@if (this.Type == HeaderType.H3)
{
    <h3 @ref="RootElement" @attributes='GetRootElementAttributes()' class="@GetCssClass().Replace("ui ","ui icon ")">
        @GetInner()
    </h3>
}
@if (this.Type == HeaderType.H4)
{
    <h4 @ref="RootElement" @attributes='GetRootElementAttributes()' class="@GetCssClass().Replace("ui ","ui icon ")">
        @GetInner()
    </h4>
}
@if (this.Type == HeaderType.H5)
{
    <h5 @ref="RootElement" @attributes='GetRootElementAttributes()' class="@GetCssClass().Replace("ui ","ui icon ")">
        @GetInner()
    </h5>
}
@if (this.Type == HeaderType.H6)
{
    <h6 @ref="RootElement" @attributes='GetRootElementAttributes()' class="@GetCssClass().Replace("ui ","ui icon ")">
        @GetInner()
    </h6>
}
@RenderAfterRootElementFragments()
@code{
    RenderFragment GetInner()
    {
        return __builder =>
        {

        @if (IconTemplate != null)
            {
            @IconTemplate
            }
            else
            {
            <Icon @ref="IconElement" @attributes='InputAttributes.GetElementAttributes("icon")' Icon="Icon" IsCircular="IsIconCircular" IsHidden="IsHidden" Color="IconColor ?? Color" IsInverted="IsInverted"></Icon>
            }
        @RenderContent()
        };
    }
}