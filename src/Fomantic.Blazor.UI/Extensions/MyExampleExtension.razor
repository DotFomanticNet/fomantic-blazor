@inherits ExtensionBase
@namespace Fomantic


@code {
    public override IEnumerable<Type> AllowedParentTypes => new List<Type> { typeof(Text), typeof(Segment) };
    // public override bool IsUnique => true;
    //public override bool IsParentOptional => true;

    public override ValueTask OnComponentInitialized()
    {
        Console.WriteLine("OnComponentInitialized");
        return base.OnComponentInitialized();
    }
    public override string ProvideComponentCssClass()
    {
        return "contain-extention";
    }
    public override ValueTask<bool> OnComponentAfterFirstRender()
    {
        Console.WriteLine("OnComponentAfterFirstRender");
        return base.OnComponentAfterFirstRender();
    }
    public override ValueTask<bool> OnComponentAfterEachRender()
    {
        Console.WriteLine("OnComponentAfterEachRender");
        return base.OnComponentAfterEachRender();
    }

    public MyExampleExtension()
    {
        this.ComponentAdditionalFragments.Add(new Blazor.UI.ComponentFragment
        {
            Fragment = d => GetHTML(),
            Location = Fomantic.Blazor.UI.ComponentFragmentLocations.BeforeRootElementAreaName

        });
    }
    RenderFragment GetHTML()
    {
        return __builder =>
        {
        @this.Parent.GetType().Name
        @this.Parent.Extensions.Count
        @((this.Parent as Fomantic.Blazor.UI.IFomanticComponentWithClass).CssClass)

        };
    }
}

